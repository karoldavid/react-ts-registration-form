{"version":3,"sources":["constants/queries.ts","queries/registrationQueries.ts","forms/RegistrationForm.tsx","Tables/RegistrationsTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUERY_KEYS","getRegistrations","uuid","a","fetch","response","ok","json","Error","statusText","createRegistration","data","method","headers","Accept","body","JSON","stringify","deleteRegistration","id","schema","yup","shape","username","min","required","password","confirmPassword","oneOf","email","phone","newsletter","INITIAL_VALUES","RegistrationForm","initialValues","useState","open","setOpen","queryClient","useQueryClient","useMutation","mutationKey","onSuccess","invalidateQueries","useCreateRegistrationMutation","useForm","mode","reValidateMode","defaultValues","resolver","yupResolver","control","handleSubmit","errors","formState","reset","useEffect","isSuccess","onSubmit","mutate","Grid","container","spacing","direction","justifyContent","alignItems","item","xs","isLoading","Box","sx","width","LinearProgress","name","render","field","TextField","fullWidth","variant","label","placeholder","margin","error","helperText","message","type","FormControlLabel","Checkbox","defaultChecked","Button","color","disabled","isEmpty","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","RegistrationsTable","useQuery","useGetRegistrationsQuery","isFetching","useDeleteRegistrationMutation","columns","useMemo","Header","accessor","d","Cell","tableProps","isError","onClick","row","original","useTable","getTableProps","headerGroups","rows","prepareRow","Table","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","column","TableCell","getHeaderProps","TableBody","i","getRowProps","cells","cell","getCellProps","UUID","App","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","StrictMode","client","CssBaseline","process","document","getElementById"],"mappings":"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","file":"static/js/main.e414072a.chunk.js","sourcesContent":["export const QUERY_KEYS = {\n  CREATE_REGISTRATION: \"CREATE_REGISTRATION\",\n  DELETE_REGISTRATION: \"DELETE_REGISTRATION\",\n  GET_REGISTRATIONS: \"GET_REGISTRATIONS\",\n};\n","import { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { QUERY_KEYS } from \"../constants/queries\";\nimport { Registration } from \"../constants/types\";\n\nexport const getRegistrations = async (uuid: string) => {\n  const response = await fetch(`https://${uuid}.mockapi.io/register`);\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error(response.statusText);\n};\n\nexport const useGetRegistrationsQuery = (uuid: string) => {\n  return useQuery<Registration[], Error>(\n    [QUERY_KEYS.GET_REGISTRATIONS, uuid],\n    () => getRegistrations(uuid)\n  );\n};\n\nexport type CreateRegistrationParams = {\n  uuid: string;\n  data: Omit<Registration, \"id\" | \"text\">;\n};\n\nexport type CreateRegistrationResponse = {\n  message: string;\n};\n\nexport const createRegistration = async ({\n  uuid,\n  data,\n}: CreateRegistrationParams) => {\n  const response = await fetch(`https://${uuid}.mockapi.io/register`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error(response.statusText);\n};\n\nexport const useCreateRegistrationMutation = (uuid: string) => {\n  const queryClient = useQueryClient();\n  return useMutation<\n    CreateRegistrationResponse,\n    Error,\n    Omit<Registration, \"id\" | \"text\">,\n    Response\n  >((data) => createRegistration({ uuid, data }), {\n    mutationKey: QUERY_KEYS.CREATE_REGISTRATION,\n    onSuccess: () => {\n      queryClient.invalidateQueries([QUERY_KEYS.GET_REGISTRATIONS]);\n    },\n  });\n};\n\nexport type DeleteRegistrationParams = {\n  uuid: string;\n  id: string;\n};\n\nexport const deleteRegistration = async ({\n  uuid,\n  id,\n}: DeleteRegistrationParams) => {\n  const response = await fetch(`https://${uuid}.mockapi.io/register/${id}`, {\n    method: \"DELETE\",\n  });\n\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error(response.statusText);\n};\n\nexport const useDeleteRegistrationMutation = (uuid: string) => {\n  const queryClient = useQueryClient();\n  return useMutation<Registration, Error, string, Response>(\n    (id) => deleteRegistration({ uuid, id }),\n    {\n      mutationKey: QUERY_KEYS.DELETE_REGISTRATION,\n      onSuccess: () => {\n        queryClient.invalidateQueries([QUERY_KEYS.GET_REGISTRATIONS, uuid]);\n      },\n    }\n  );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport isEmpty from \"lodash/isEmpty\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { Registration } from \"../constants/types\";\nimport { useCreateRegistrationMutation } from \"../queries/registrationQueries\";\n\nconst schema = yup\n  .object()\n  .shape({\n    username: yup\n      .string()\n      .min(5, \"Username should be 5 chars min.\")\n      .required(\"Username is required.\"),\n    password: yup\n      .string()\n      .min(8, \"Password should be 8 chars min.\")\n      .required(\"Password is required.\"),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match.\"),\n    email: yup\n      .string()\n      .email(\"Invalid email format.\")\n      .required(\"Email is required.\"),\n    phone: yup.string(),\n    newsletter: yup.boolean(),\n  })\n  .required();\n\nexport type RegistrationFormInput = Omit<Registration, \"id\" | \"text\">;\n\nexport const INITIAL_VALUES: RegistrationFormInput = {\n  username: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  phone: \"\",\n  email: \"\",\n  newsletter: true,\n};\n\ntype RegistrationFormProps = {\n  uuid: string;\n  initialValues: RegistrationFormInput;\n};\n\nconst RegistrationForm: FunctionComponent<RegistrationFormProps> = ({\n  uuid,\n  initialValues,\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const createRegistration = useCreateRegistrationMutation(uuid);\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<RegistrationFormInput>({\n    mode: \"onSubmit\",\n    reValidateMode: \"onChange\",\n    defaultValues: initialValues,\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = (data: RegistrationFormInput) => {\n    createRegistration.mutate(data);\n  };\n\n  useEffect(() => {\n    if (createRegistration.isSuccess) {\n      setOpen(true);\n      reset(initialValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [createRegistration.isSuccess]);\n\n  return (\n    <>\n      <form id=\"registration-form\" onSubmit={handleSubmit(onSubmit)}>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justifyContent=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid container item xs={12} spacing={2}>\n            {createRegistration.isLoading && (\n              <Box sx={{ width: \"100%\" }}>\n                <LinearProgress />\n              </Box>\n            )}\n          </Grid>\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Controller\n                name=\"username\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"Username\"\n                    placeholder=\"Username\"\n                    margin=\"normal\"\n                    error={!!errors.username}\n                    helperText={errors.username?.message}\n                    {...field}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Controller\n                name=\"password\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    type=\"password\"\n                    label=\"Password\"\n                    error={!!errors.password}\n                    helperText={errors.password?.message}\n                    {...field}\n                  />\n                )}\n              />\n            </Grid>\n\n            <Grid item xs={6}>\n              <Controller\n                name=\"confirmPassword\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    type=\"password\"\n                    label=\"Confirm Password\"\n                    error={!!errors.confirmPassword}\n                    helperText={errors.confirmPassword?.message}\n                    {...field}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Controller\n                name=\"email\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"Email\"\n                    placeholder=\"some@some.com\"\n                    error={!!errors.email}\n                    helperText={errors.email?.message}\n                    {...field}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Controller\n                name=\"phone\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"Phone Number\"\n                    placeholder=\"0791878745\"\n                    error={!!errors.phone}\n                    helperText={errors.phone?.message}\n                    {...field}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Controller\n                name=\"newsletter\"\n                control={control}\n                render={({ field }) => (\n                  <FormControlLabel\n                    label=\"Newsletter Subscription\"\n                    control={\n                      <Checkbox\n                        {...field}\n                        defaultChecked={initialValues.newsletter}\n                      />\n                    }\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container item xs={12} spacing={2}>\n            <Grid item xs={6}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={!isEmpty(errors) || createRegistration.isLoading}\n              >\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </form>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        open={open}\n        autoHideDuration={6000}\n        message={createRegistration.data?.message}\n        onClose={() => setOpen(false)}\n      />\n    </>\n  );\n};\n\nexport default RegistrationForm;\n","import React, { FunctionComponent, useEffect, useMemo, useState } from \"react\";\nimport { Column, useTable } from \"react-table\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { Registration } from \"../constants/types\";\nimport {\n  useGetRegistrationsQuery,\n  useDeleteRegistrationMutation,\n} from \"../queries/registrationQueries\";\n\ntype RegistrationsTableProps = {\n  uuid: string;\n};\n\nconst RegistrationsTable: FunctionComponent<RegistrationsTableProps> = ({\n  uuid,\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { data = [], isFetching } = useGetRegistrationsQuery(uuid);\n  const deleteRegistration = useDeleteRegistrationMutation(uuid);\n\n  const columns = useMemo<Column<Registration>[]>(\n    () => [\n      {\n        Header: \"Name\",\n        columns: [\n          {\n            Header: \"Username\",\n            accessor: \"username\",\n          },\n        ],\n      },\n      {\n        Header: \"Contact Information\",\n        columns: [\n          {\n            Header: \"Email\",\n            accessor: \"email\",\n          },\n          {\n            Header: \"Phone\",\n            accessor: \"phone\",\n          },\n        ],\n      },\n      {\n        Header: \"Subscription\",\n        columns: [\n          {\n            Header: \"Newsletter\",\n            accessor: (d: Registration) => {\n              if (typeof d.newsletter === \"boolean\")\n                return d.newsletter ? \"yes\" : \"no\";\n              return d.newsletter;\n            },\n          },\n          {\n            Header: \"Text\",\n            accessor: \"text\",\n          },\n        ],\n      },\n      {\n        id: \"delete\",\n        Cell: (tableProps: any) => (\n          <Button\n            color=\"primary\"\n            disabled={\n              deleteRegistration.isLoading || deleteRegistration.isError\n            }\n            onClick={() => {\n              deleteRegistration.mutate(tableProps.row.original.id);\n            }}\n          >\n            Delete\n          </Button>\n        ),\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deleteRegistration.isLoading, deleteRegistration.isError]\n  );\n\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data,\n  });\n\n  useEffect(() => {\n    if (deleteRegistration.error && !deleteRegistration.isLoading) {\n      setOpen(true);\n    } else if (open) {\n      setOpen(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deleteRegistration.error, deleteRegistration.isLoading]);\n\n  return (\n    <>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n      >\n        <Grid container item xs={12} spacing={2}>\n          <Box sx={{ width: \"100%\" }}>{isFetching && <LinearProgress />}</Box>\n        </Grid>\n        <Table {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell {...column.getHeaderProps()}>\n                    {column.render(\"Header\")}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell {...cell.getCellProps()}>\n                        {cell.render(\"Cell\")}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Grid>\n      {deleteRegistration.error && (\n        <Snackbar\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          }}\n          open={open}\n          autoHideDuration={3000}\n          message={`Registration Deletion Error: ${deleteRegistration.error?.message}`}\n          onClose={() => {\n            setOpen(false);\n            deleteRegistration.reset();\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default RegistrationsTable;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport RegistrationForm, { INITIAL_VALUES } from \"./forms/RegistrationForm\";\nimport RegistrationsTable from \"./Tables/RegistrationsTable\";\n\nconst UUID = \"5e8c6579e61fbd00164aebec\";\n\nfunction App() {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item>\n        <Box m={8}>\n          <RegistrationForm uuid={UUID} initialValues={INITIAL_VALUES} />\n        </Box>\n      </Grid>\n      <Grid item>\n        <Box m={8}>\n          <RegistrationsTable uuid={UUID} />\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <CssBaseline />\n      <App />\n      {process.env.NODE_ENV === \"development\" && (\n        <ReactQueryDevtools initialIsOpen={false} />\n      )}\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}